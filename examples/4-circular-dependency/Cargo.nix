# This file was @generated by cargo2nix 0.8.3.
# It is not intended to be manually edited.

{
  release ? true,
  rootFeatures ? [
    "lib-crate/default"
    "util-crate/default"
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  mkRustCrate,
  rustLib,
  lib,
}:
let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "0.8.3";
  workspace = {
    lib-crate = rustPackages.unknown.lib-crate."0.1.0";
    util-crate = rustPackages.unknown.util-crate."0.1.0";
  };
  "unknown".lib-crate."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "lib-crate";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal ./lib-crate/.;
    devDependencies = {
      util_crate = rustPackages."unknown".util-crate."0.1.0" { inherit profileName; };
    };
  });
  
  "unknown".util-crate."0.1.0" = overridableMkRustCrate (profileName: rec {
    name = "util-crate";
    version = "0.1.0";
    registry = "unknown";
    src = fetchCrateLocal ./util-crate/.;
    dependencies = {
      lib_crate = rustPackages."unknown".lib-crate."0.1.0" { inherit profileName; };
    };
  });
  
}
